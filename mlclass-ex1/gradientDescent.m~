function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    %index start from 1
    xx = 0;
    yy = 0;
    %thth = theta
    %yhx = X(1,:)
    %X(1,:)*theta
    %x11 = X(1,2)
    for row = 1:m
    	xx  = xx + X(row,:)*theta - y(row,1);
    	yy  = yy + (X(row,:)*theta - y(row,1))*X(row,2);
    end
    BB = [xx yy]
    %yy
    %theta zero
    %theta(1) -= alpha*xx/m;
    %theta(2) -= alpha*yy/m;
    %theta 
    theta = BB'.*theta







    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
